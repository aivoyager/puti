#!/bin/bash

# puti-cmd: A script to control the Puti tweet scheduler

# Set the path to the Puti project directory
PUTI_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PUTI_DIR"

# Set the PUTI_DATA_PATH environment variable if not already set
if [ -z "$PUTI_DATA_PATH" ]; then
    export PUTI_DATA_PATH="$HOME/puti/data"
    mkdir -p "$PUTI_DATA_PATH"
    echo "Set PUTI_DATA_PATH to $PUTI_DATA_PATH"
fi

# Function to show usage
show_usage() {
    echo "Puti Tweet Scheduler Control"
    echo ""
    echo "Usage: puti-cmd COMMAND [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  start           Start the scheduler daemon"
    echo "  stop            Stop the scheduler daemon"
    echo "  status          Check if the scheduler daemon is running"
    echo "  list            List all scheduled tasks"
    echo "  create          Create a new scheduled tweet task"
    echo "  enable ID       Enable a specific schedule by ID"
    echo "  disable ID      Disable a specific schedule by ID"
    echo "  delete ID       Delete a specific schedule by ID"
    echo "  run ID          Manually run a specific schedule task"
    echo ""
    echo "Examples:"
    echo "  puti-cmd start              # Start the scheduler daemon"
    echo "  puti-cmd create daily_tweet \"0 12 * * *\" --topic \"AI News\""
    echo "  puti-cmd list               # List all scheduled tasks"
    echo "  puti-cmd run 1              # Manually run schedule with ID 1"
    echo ""
}

# Command handling
case "$1" in
    start)
        shift
        python -c "
import atexit
from puti.scheduler import SchedulerDaemon, cleanup_daemon

# Unregister the cleanup function to prevent automatic shutdown
atexit.unregister(cleanup_daemon)

# Start the daemon
SchedulerDaemon().start()
"
        ;;
    stop)
        python -c "
import atexit
from puti.scheduler import SchedulerDaemon, cleanup_daemon

# Unregister the cleanup function to prevent automatic shutdown
atexit.unregister(cleanup_daemon)

# Stop the daemon
SchedulerDaemon().stop()
"
        ;;
    status)
        python -c "
import atexit
from puti.scheduler import SchedulerDaemon, cleanup_daemon

# Unregister the cleanup function to prevent automatic shutdown
atexit.unregister(cleanup_daemon)

# Check status
daemon = SchedulerDaemon()
running = daemon.is_running()
pid = daemon._get_pid() if running else None
print(f'Scheduler is {\"running with PID \" + str(pid) if running else \"not running\"}')
"
        ;;
    list)
        python -c "
from puti.db.schedule_manager import ScheduleManager
from rich.console import Console
from rich.table import Table

console = Console()
manager = ScheduleManager()
schedules = manager.get_all()

if not schedules:
    console.print('[yellow]No schedules found in the database.[/yellow]')
else:
    table = Table(title='All Scheduled Tasks')
    table.add_column('ID', style='dim')
    table.add_column('Name', style='cyan')
    table.add_column('Cron Schedule', style='green')
    table.add_column('Enabled', style='yellow')
    table.add_column('Running', style='bright_green')
    
    for idx, schedule in enumerate(schedules, 1):
        # Use row id or index if id is None
        schedule_id = str(schedule.id) if schedule.id is not None else str(idx)
        table.add_row(
            schedule_id,
            schedule.name,
            schedule.cron_schedule,
            '✅' if schedule.enabled else '❌',
            '✅' if schedule.is_running else '❌'
        )
    
    console.print(table)
"
        ;;
    create)
        if [ "$#" -lt 3 ]; then
            echo "Error: Missing required arguments for create command"
            echo "Usage: puti-scheduler create NAME CRON_SCHEDULE [--topic TOPIC] [--disabled]"
            exit 1
        fi
        
        name="$2"
        cron="$3"
        shift 3
        
        # Parse optional arguments
        topic=""
        enabled="True"
        
        while [ "$#" -gt 0 ]; do
            case "$1" in
                --topic)
                    topic="$2"
                    shift 2
                    ;;
                --disabled)
                    enabled="False"
                    shift
                    ;;
                *)
                    echo "Unknown option: $1"
                    exit 1
                    ;;
            esac
        done
        
        python -c "
from puti.db.schedule_manager import ScheduleManager
import sys

try:
    name = '$name'
    cron = '$cron'
    topic = '$topic' if '$topic' else None
    enabled = $enabled
    
    # Set up parameters
    params = {}
    if topic:
        params['topic'] = topic
    
    # Create schedule
    manager = ScheduleManager()
    schedule = manager.create_schedule(
        name=name,
        cron_schedule=cron,
        enabled=enabled,
        params=params
    )
    
    print(f\"Created tweet schedule '{name}' (ID: {schedule.id})\")
    
    if enabled:
        try:
            from celery_queue.simplified_tasks import check_dynamic_schedules
            check_dynamic_schedules.delay()
            print(\"Triggered schedule registration\")
        except Exception as err:
            print(f\"Note: Could not trigger immediate check: {err}\")
            print(\"Schedule was created but may not be active until Celery Beat restarts\")
except Exception as e:
    print(f\"Error creating schedule: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"
        ;;
    enable)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti-scheduler enable ID"
            exit 1
        fi
        
        id="$2"
        python -c "
from puti.db.schedule_manager import ScheduleManager
import sys

try:
    manager = ScheduleManager()
    schedule = manager.get_by_id($id)
    
    if not schedule:
        print(f\"Error: Schedule with ID $id not found.\", file=sys.stderr)
        sys.exit(1)
    
    manager.update_schedule($id, enabled=True)
    print(f\"Schedule '{schedule.name}' (ID: $id) has been enabled.\")
    
    try:
        from celery_queue.simplified_tasks import check_dynamic_schedules
        check_dynamic_schedules.delay()
        print(\"Triggered an immediate schedule check.\")
    except Exception as err:
        print(f\"Note: Could not trigger immediate check: {err}\")
        print(\"Schedule was enabled but may not be active until Celery Beat restarts\")
except Exception as e:
    print(f\"Error enabling schedule: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"
        ;;
    disable)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti-scheduler disable ID"
            exit 1
        fi
        
        id="$2"
        python -c "
from puti.db.schedule_manager import ScheduleManager
import sys

try:
    manager = ScheduleManager()
    schedule = manager.get_by_id($id)
    
    if not schedule:
        print(f\"Error: Schedule with ID $id not found.\", file=sys.stderr)
        sys.exit(1)
    
    manager.update_schedule($id, enabled=False)
    print(f\"Schedule '{schedule.name}' (ID: $id) has been disabled.\")
except Exception as e:
    print(f\"Error disabling schedule: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"
        ;;
    delete)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti-scheduler delete ID"
            exit 1
        fi
        
        id="$2"
        python -c "
from puti.db.schedule_manager import ScheduleManager
import sys

try:
    manager = ScheduleManager()
    schedule = manager.get_by_id($id)
    
    if not schedule:
        print(f\"Error: Schedule with ID $id not found.\", file=sys.stderr)
        sys.exit(1)
    
    # Stop the task if it's running
    if schedule.is_running:
        manager.stop_task($id)
    
    # Delete the schedule
    manager.delete($id, soft_delete=False)
    print(f\"Schedule '{schedule.name}' (ID: $id) has been deleted.\")
except Exception as e:
    print(f\"Error deleting schedule: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"
        ;;
    run)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti-scheduler run ID"
            exit 1
        fi
        
        id="$2"
        python -c "
from puti.db.schedule_manager import ScheduleManager
import sys

try:
    manager = ScheduleManager()
    schedule = manager.get_by_id($id)
    
    if not schedule:
        print(f\"Error: Schedule with ID $id not found.\", file=sys.stderr)
        sys.exit(1)
    
    # Get parameters from schedule
    params = schedule.params or {}
    topic = params.get('topic')
    
    # Directly use the simplified task
    try:
        from celery_queue.simplified_tasks import generate_tweet_task
        task = generate_tweet_task.delay(topic=topic)
        print(f\"Started task for schedule '{schedule.name}' (ID: $id)\")
        
        # Update the schedule record
        import datetime
        manager.update_schedule($id, 
            is_running=True,
            last_run=datetime.datetime.now(),
            task_id=task.id
        )
    except Exception as task_err:
        print(f\"Error starting task: {str(task_err)}\", file=sys.stderr)
        sys.exit(1)
except Exception as e:
    print(f\"Error running schedule: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        if [ -z "$1" ]; then
            show_usage
        else
            echo "Unknown command: $1"
            echo "Use 'puti-scheduler --help' to see available commands"
            exit 1
        fi
        ;;
esac 