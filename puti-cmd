#!/bin/bash

# puti-cmd: A wrapper script that redirects to the new puti scheduler command

# Set the path to the Puti project directory
PUTI_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PUTI_DIR"

# Set the PUTI_DATA_PATH environment variable if not already set
if [ -z "$PUTI_DATA_PATH" ]; then
    export PUTI_DATA_PATH="$HOME/puti/data"
    mkdir -p "$PUTI_DATA_PATH"
    echo "Set PUTI_DATA_PATH to $PUTI_DATA_PATH"
fi

# Print migration warning
echo -e "\033[33mWARNING: The puti-cmd command is deprecated.\033[0m"
echo "Please use 'puti scheduler' instead. For example:"
echo "  puti scheduler list"
echo "  puti scheduler create <name> <cron_schedule>"
echo ""

# Check if the python environment is properly set up
if ! command -v puti &> /dev/null; then
    echo -e "\033[31mWarning: puti command not found in PATH.\033[0m"
    echo "Make sure you have activated the puti virtual environment."
    echo "Example: source /path/to/puti/venv/bin/activate"
    echo ""
    echo "Attempting to use local puti installation..."
fi

# Map command to the new puti scheduler commands
case "$1" in
    start)
        echo -e "\033[32mExecuting: puti scheduler start\033[0m"
        echo "---------------------------------------------"
        puti scheduler start "${@:2}" 2>/dev/null || python -m puti.cli scheduler start "${@:2}"
        ;;
    stop)
        echo -e "\033[32mExecuting: puti scheduler stop\033[0m"
        echo "---------------------------------------------"
        puti scheduler stop "${@:2}" 2>/dev/null || python -m puti.cli scheduler stop "${@:2}"
        ;;
    status)
        echo -e "\033[32mExecuting: puti scheduler status\033[0m"
        echo "---------------------------------------------"
        puti scheduler status "${@:2}" 2>/dev/null || python -m puti.cli scheduler status "${@:2}"
        ;;
    list)
        echo -e "\033[32mExecuting: puti scheduler list\033[0m"
        echo "---------------------------------------------"
        puti scheduler list "${@:2}" 2>/dev/null || python -m puti.cli scheduler list "${@:2}"
        ;;
    create)
        if [ "$#" -lt 3 ]; then
            echo "Error: Missing required arguments for create command"
            echo "Usage: puti scheduler create NAME CRON_SCHEDULE [--topic TOPIC] [--disabled]"
            exit 1
        fi
        
        name="$2"
        cron="$3"
        shift 3
        
        # Parse optional arguments
        topic=""
        disabled=""
        
        while [ "$#" -gt 0 ]; do
            case "$1" in
                --topic)
                    topic="--topic $2"
                    shift 2
                    ;;
                --disabled)
                    disabled="--disabled"
                    shift
                    ;;
                *)
                    echo "Unknown option: $1"
                    exit 1
                    ;;
            esac
        done
        
        echo -e "\033[32mExecuting: puti scheduler create $name \"$cron\" $topic $disabled\033[0m"
        echo "---------------------------------------------"
        puti scheduler create "$name" "$cron" $topic $disabled 2>/dev/null || \
            python -m puti.cli scheduler create "$name" "$cron" $topic $disabled
        ;;
    enable)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti scheduler enable ID"
            exit 1
        fi
        
        id="$2"
        echo -e "\033[32mExecuting: puti scheduler enable $id\033[0m"
        echo "---------------------------------------------"
        puti scheduler enable $id 2>/dev/null || python -m puti.cli scheduler enable $id
        ;;
    disable)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti scheduler disable ID"
            exit 1
        fi
        
        id="$2"
        echo -e "\033[32mExecuting: puti scheduler disable $id\033[0m"
        echo "---------------------------------------------"
        puti scheduler disable $id 2>/dev/null || python -m puti.cli scheduler disable $id
        ;;
    delete)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti scheduler delete ID"
            exit 1
        fi
        
        id="$2"
        echo -e "\033[32mExecuting: puti scheduler delete $id\033[0m"
        echo "---------------------------------------------"
        puti scheduler delete $id 2>/dev/null || python -m puti.cli scheduler delete $id
        ;;
    run)
        if [ "$#" -lt 2 ]; then
            echo "Error: Missing schedule ID"
            echo "Usage: puti scheduler run ID"
            exit 1
        fi
        
        id="$2"
        echo -e "\033[32mExecuting: puti scheduler run $id\033[0m"
        echo "---------------------------------------------"
        puti scheduler run $id 2>/dev/null || python -m puti.cli scheduler run $id
        ;;
    help|--help|-h)
        echo -e "\033[32mExecuting: puti scheduler --help\033[0m"
        echo "---------------------------------------------"
        puti scheduler --help 2>/dev/null || python -m puti.cli scheduler --help
        ;;
    *)
        # If no arguments provided, show help
        if [ -z "$1" ]; then
            echo -e "\033[32mExecuting: puti scheduler --help\033[0m"
            echo "---------------------------------------------"
            puti scheduler --help 2>/dev/null || python -m puti.cli scheduler --help
        else
            echo "Unknown command: $1"
            echo "Use 'puti scheduler --help' to see available commands"
            exit 1
        fi
        ;;
esac

# Remind about the migration
echo ""
echo -e "\033[33mReminder: Please use 'puti scheduler' for all scheduler commands in the future.\033[0m" 