"""
@Author: obstacles
@Time:  2025-06-20 10:00
@Description:  Tests for the x_bot actions.
"""
import pytest
from puti.llm.actions.x_bot import GenerateTweetAction, PublishTweetAction
from puti.llm.messages import AssistantMessage
from puti.llm.roles.agents import Ethan, EthanG
from puti.logs import logger_factory
from puti.llm.workflow import Workflow
from puti.llm.graph import Graph, Vertex

lgr = logger_factory.llm


@pytest.mark.asyncio
async def test_generate_tweet_action():
    """
    Tests the GenerateTweetAction to ensure it follows the three-step process:
    1. Generate a topic.
    2. Generate a tweet based on the topic.
    3. Review the tweet.
    """
    action = GenerateTweetAction()
    result = await action.run()
    lgr.info(f"Generated tweet: {result.content}")
    assert "Reviewed" in result.content


@pytest.mark.asyncio
async def test_publish_tweet_action():
    """
    Tests the PublishTweetAction to ensure it correctly publishes a real tweet
    generated by the GenerateTweetAction.
    """
    # First, generate a real tweet using GenerateTweetAction
    generate_action = GenerateTweetAction()
    generated_tweet = await generate_action.run()
    lgr.info(f"Generated tweet content: {generated_tweet}")

    # Now, publish the generated tweet
    publish_action = PublishTweetAction()

    # Use the real Ethan role
    role = Ethan()

    # Run the publish action with the generated tweet
    result = await publish_action.run(role=role, previous_result=generated_tweet)
    lgr.info(f"Publish tweet result: {result}")

    # Assertions
    # The result of publish action is not deterministic.
    # It depends on the llm.
    # We just assert that it is not None.
    assert result


async def test_generate_tweet_graph():
    generate_tweet_action = GenerateTweetAction()
    post_tweet_action = PublishTweetAction()

    ethan = EthanG()

    generate_tweet_vertex = Vertex(id='generate_tweet', action=generate_tweet_action)
    post_tweet_vertex = Vertex(id='post_tweet', action=post_tweet_action, role=ethan)

    graph = Graph()
    graph.add_vertices(generate_tweet_vertex, post_tweet_vertex)
    graph.add_edge(generate_tweet_vertex.id, post_tweet_vertex.id)
    graph.set_start_vertex(generate_tweet_vertex.id)

    workflow = Workflow(graph=graph)
    resp = await workflow.run_until_vertex(post_tweet_vertex.id)
    print(resp)


















