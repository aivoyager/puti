"""
@Author: obstacles
@Time:  2025-06-04 15:57
@Description:  
"""
from openai import AsyncOpenAI, OpenAI

messages = [{'role': 'system', 'content': '(system): You name is Alex.You are a highly capable and autonomous AI assistant.   Your mission is to independently and exhaustively analyze and resolve user queries.\n\nYou operate with a designated working directory, referenced as `/Users/wangshuang/PycharmProjects/puti/putii`.   Users may ask questions about general contents or specific files and directories within this location.   When such questions arise, you MUST proceed as follows:\n    1.\t  If the user’s query refers to a specific file or directory， your absolute first step is to recursively search within /Users/wangshuang/PycharmProjects/puti/putii to locate and confirm that the specified item exists.   You must not attempt to operate on, analyze, or make assumptions about a file or directory before verifying its presence and exact path through recursive inspection.\n    2.\t  If the query is about the general contents (e.g., “What files are in my working directory?”), use your tools to accurately list its current files and subdirectories (non-recursive unless otherwise specified).\n    3.\t  Only after successfully locating a specific item (if applicable) or obtaining a listing of general contents, should you proceed with any further requested operations, analysis, or information retrieval related to the working directory and its contents.\n    4.\t  You must then integrate this verified information directly and accurately when addressing the user’s query.\n\nYou have full permission to view, delete, edit, and add any content within working directory, as required to resolve the user’s request.\nYour primary objective is to find the definitive and complete answer.   To achieve this, you MUST fully leverage your available tools (including any tools for interacting with your working directory or its contents, adhering to the confirmation steps outlined above) in a methodical, step-by-step process.   Break down the problem as needed, using your tools at each stage to gather all necessary information (including from the working directory if relevant to the query) and progressively build towards the final solution.   You are expected to make every effort to overcome obstacles and derive the answer yourself.\nYour internal thought process, the detailed steps of your tool usage, or any ambiguous intermediate information MUST NOT be included in your output.   Your focus is solely on providing the final, conclusive answer.\n    \nIf, after your best efforts and thorough, step-by-step tool utilization, you have determined the final and complete answer, you MUST respond in the following JSON format and NOTHING ELSE.   Do not include any other text, explanations, or conversational filler before or after this JSON object:\n{"FINAL_ANSWER": "<your_final_answer_here>"}     Your ability to follow these format rules is part of your `self reflection` and execution competence.'}, {'role': 'user', 'content': '(user): 我的根目录下有什么'}]
timeout = 60
stream = False
max_tokens = 4096
temperature = 1.0
model = 'o4-mini'
tools = [{'type': 'function', 'function': {'name': 'file_operation', 'description': 'Custom editing tool for viewing, creating and editing files\n* State is persistent across command calls and discussions with the user\n* If `path` is a file, `view` displays the result of applying `cat -n`.  If `path` is a directory, `view` lists non-hidden files and directories up to 2 levels deep\n* The `create` command cannot be used if the specified `path` already exists as a file\n* If a `command` generates a long output, it will be truncated and marked with `<response clipped>`\n* The `undo_edit` command will revert the last edit made to the file at `path`\n\nNotes for using the `str_replace` command:\n* The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file.  Be mindful of whitespaces!\n* If the `old_str` parameter is not unique in the file, the replacement will not be performed.  Make sure to include enough context in `old_str` to make it unique\n* The `new_str` parameter should contain the edited lines that should replace the `old_str`', 'parameters': {'type': 'object', 'properties': {'command': {}, 'path': {'type': 'string', 'description': 'Absolute path to file or directory.'}, 'file_text': {'type': 'string', 'description': 'Required parameter of `create` command, with the content of the file to be created.'}, 'old_str': {'type': 'string', 'description': 'Required parameter of `str_replace` command containing the string in `path` to replace.'}, 'new_str': {'type': 'string', 'description': 'Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.'}, 'insert_line': {'type': 'integer', 'description': 'Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.'}, 'view_range': {'type': 'array', 'description': 'Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.', 'items': {'type': 'integer', 'description': ''}}}, 'required': ['command', 'path']}}}, {'type': 'function', 'function': {'name': 'generate_tweet', 'description': 'Use this tool to generate a cz tweet can be posted on x website.', 'parameters': {'type': 'object', 'properties': {'topic': {'type': 'string', 'description': '`topic` is an optional parameter that guides tweet generation toward a specific theme, subject, or keyword.\nIf the user’s input clearly expresses a desire to focus on a particular topic (e.g., “Write a tweet about Elon Musk”), extract the relevant keyword or phrase and set it as the topic.\nIf the input is vague or does not suggest any particular direction (e.g., “Post something funny”), leave topic unset and allow the model to generate freely.\n'}}, 'required': []}}}, {'type': 'function', 'function': {'name': 'python_execute', 'description': 'Executes Python code string. Note: Only print outputs are visible, function return values \n    are not captured. Use print statements to see results.', 'parameters': {'type': 'object', 'properties': {'code': {'type': 'string', 'description': 'The Python code to execute.'}}, 'required': ['code']}}}, {'type': 'function', 'function': {'name': 'execute_command', 'description': "Request to execute a CLI(Command-Line Interface) command on the system.\nUse this when you need to perform system operations or run specific commands to accomplish any step in the user's task.\nYou must tailor your command to the user's system and provide a clear explanation of what the command does.\nPrefer to execute complex CLI commands over creating executable scripts, as they are more flexible and easier to run.\nCommands will be executed in the current working directory.\nNote: You MUST append a `sleep 0.02` to the end of the command for commands that will complete in under 20ms, as this will circumvent a known issue with the terminal tool where it will sometimes not return the output when the command completes too quickly.\n", 'parameters': {'type': 'object', 'properties': {'command': {'type': 'string', 'description': '(required) The CLI command to execute. This should be valid for the current operating system. Ensure the command is properly formatted and does not contain any harmful instructions.'}}, 'required': ['command']}}}, {'type': 'function', 'function': {'name': 'web_search', 'description': '\nThe Web Search Tool is designed to provide real-time access to up-to-date information from the internet. It enables agents or language models to query external knowledge sources when internal memory or training data may be outdated or insufficient.\nUse the Web Search Tool when the question involves:\n•\tRecent events (e.g., today’s news, current sports scores, live weather).\n•\tDynamic or fast-changing content (e.g., product prices, stock updates, new regulations).\n•\tNiche or rare knowledge that may not be in the model’s training data.\n•\tFact-checking to confirm or refute specific information.\n      ', 'parameters': {'type': 'object', 'properties': {'query': {'type': 'string', 'description': 'The search query text.'}, 'num_results': {'type': 'integer', 'description': 'The number of search results to return. Default is 3.'}}, 'required': ['query']}}}]
base_url = 'https://aiapi.0o0.pro/v1'
# base_url = 'https://api.evo4ai.com/v1'
cli = OpenAI(base_url=base_url, api_key='sk-eE6Rl0A3XmvPoCz_032Ud9ZVuPUSTiKpFs4cU58hWyIpBTVSOvVA2kCDEY4')
resp = cli.chat.completions.create(
    messages=messages,
    timeout=timeout,
    stream=stream,
    max_tokens=max_tokens,
    temperature=temperature,
    model=model,
    tools=tools
)
# resp.raise_for_status()
print(resp)



